//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import followIfLoginRedirect from './components/api-authorization/followIfLoginRedirect';

export class BatchJobsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    createJob(command: CreateBatchJobCommand): Promise<BJob> {
        let url_ = this.baseUrl + "/api/BatchJobs";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateJob(_response);
        });
    }

    protected processCreateJob(response: Response): Promise<BJob> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BJob.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BJob>(null as any);
    }

    query(jobType: JobType, pageNumber: number, pageSize: number): Promise<PaginatedListOfBatchJobVm> {
        let url_ = this.baseUrl + "/api/BatchJobs?";
        if (jobType === undefined || jobType === null)
            throw new Error("The parameter 'jobType' must be defined and cannot be null.");
        else
            url_ += "JobType=" + encodeURIComponent("" + jobType) + "&";
        if (pageNumber === undefined || pageNumber === null)
            throw new Error("The parameter 'pageNumber' must be defined and cannot be null.");
        else
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processQuery(_response);
        });
    }

    protected processQuery(response: Response): Promise<PaginatedListOfBatchJobVm> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfBatchJobVm.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedListOfBatchJobVm>(null as any);
    }

    updateJob(jobId: number, command: UpdateBatchJobCommand): Promise<BJob> {
        let url_ = this.baseUrl + "/api/BatchJobs/{jobId}";
        if (jobId === undefined || jobId === null)
            throw new Error("The parameter 'jobId' must be defined.");
        url_ = url_.replace("{jobId}", encodeURIComponent("" + jobId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateJob(_response);
        });
    }

    protected processUpdateJob(response: Response): Promise<BJob> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BJob.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BJob>(null as any);
    }

    executeJob(jobId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/BatchJobs/start/{jobId}";
        if (jobId === undefined || jobId === null)
            throw new Error("The parameter 'jobId' must be defined.");
        url_ = url_.replace("{jobId}", encodeURIComponent("" + jobId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExecuteJob(_response);
        });
    }

    protected processExecuteJob(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    stopJob(jobId: number): Promise<void> {
        let url_ = this.baseUrl + "/api/BatchJobs/stop/{jobId}";
        if (jobId === undefined || jobId === null)
            throw new Error("The parameter 'jobId' must be defined.");
        url_ = url_.replace("{jobId}", encodeURIComponent("" + jobId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processStopJob(_response);
        });
    }

    protected processStopJob(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class TodoItemsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getTodoItemsWithPagination(listId: number, pageNumber: number, pageSize: number): Promise<PaginatedListOfTodoItemBriefDto> {
        let url_ = this.baseUrl + "/api/TodoItems?";
        if (listId === undefined || listId === null)
            throw new Error("The parameter 'listId' must be defined and cannot be null.");
        else
            url_ += "ListId=" + encodeURIComponent("" + listId) + "&";
        if (pageNumber === undefined || pageNumber === null)
            throw new Error("The parameter 'pageNumber' must be defined and cannot be null.");
        else
            url_ += "PageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTodoItemsWithPagination(_response);
        });
    }

    protected processGetTodoItemsWithPagination(response: Response): Promise<PaginatedListOfTodoItemBriefDto> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaginatedListOfTodoItemBriefDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PaginatedListOfTodoItemBriefDto>(null as any);
    }

    createTodoItem(command: CreateTodoItemCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/TodoItems";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateTodoItem(_response);
        });
    }

    protected processCreateTodoItem(response: Response): Promise<number> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    updateTodoItem(id: number, command: UpdateTodoItemCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/TodoItems/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTodoItem(_response);
        });
    }

    protected processUpdateTodoItem(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    deleteTodoItem(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/TodoItems/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteTodoItem(_response);
        });
    }

    protected processDeleteTodoItem(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    updateTodoItemDetail(id: number, command: UpdateTodoItemDetailCommand): Promise<void> {
        let url_ = this.baseUrl + "/api/TodoItems/UpdateDetail/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateTodoItemDetail(_response);
        });
    }

    protected processUpdateTodoItemDetail(response: Response): Promise<void> {
        followIfLoginRedirect(response);
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export abstract class BaseEntity implements IBaseEntity {
    id?: number;
    domainEvents?: BaseEvent[];

    constructor(data?: IBaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["domainEvents"])) {
                this.domainEvents = [] as any;
                for (let item of _data["domainEvents"])
                    this.domainEvents!.push(BaseEvent.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.domainEvents)) {
            data["domainEvents"] = [];
            for (let item of this.domainEvents)
                data["domainEvents"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBaseEntity {
    id?: number;
    domainEvents?: BaseEvent[];
}

export abstract class BaseAuditableEntity extends BaseEntity implements IBaseAuditableEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date;
    lastModifiedBy?: string | undefined;

    constructor(data?: IBaseAuditableEntity) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.createdBy = _data["createdBy"];
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"];
        }
    }

    static override fromJS(data: any): BaseAuditableEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseAuditableEntity' cannot be instantiated.");
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["createdBy"] = this.createdBy;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy;
        super.toJSON(data);
        return data;
    }
}

export interface IBaseAuditableEntity extends IBaseEntity {
    created?: Date;
    createdBy?: string | undefined;
    lastModified?: Date;
    lastModifiedBy?: string | undefined;
}

export class BJob extends BaseAuditableEntity implements IBJob {
    jobName?: string;
    jobGroup?: string;
    jobType?: JobType;
    jobUrl?: string | undefined;
    cronExpression?: string | undefined;
    scheduleType?: string;
    year?: string | undefined;
    month?: string | undefined;
    day?: string | undefined;
    weekDay?: string | undefined;
    hour?: string | undefined;
    minute?: string | undefined;
    second?: string | undefined;
    batchLaunchMonthDay?: string | undefined;
    batchLaunchWeedDay?: string | undefined;
    loopStep?: number;
    workHourStart?: number;
    workHourEnd?: number;
    jobTriggerId?: number | undefined;
    jobNo?: number | undefined;
    startType?: number | undefined;
    status?: TaskJobStatus;

    constructor(data?: IBJob) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.jobName = _data["jobName"];
            this.jobGroup = _data["jobGroup"];
            this.jobType = _data["jobType"];
            this.jobUrl = _data["jobUrl"];
            this.cronExpression = _data["cronExpression"];
            this.scheduleType = _data["scheduleType"];
            this.year = _data["year"];
            this.month = _data["month"];
            this.day = _data["day"];
            this.weekDay = _data["weekDay"];
            this.hour = _data["hour"];
            this.minute = _data["minute"];
            this.second = _data["second"];
            this.batchLaunchMonthDay = _data["batchLaunchMonthDay"];
            this.batchLaunchWeedDay = _data["batchLaunchWeedDay"];
            this.loopStep = _data["loopStep"];
            this.workHourStart = _data["workHourStart"];
            this.workHourEnd = _data["workHourEnd"];
            this.jobTriggerId = _data["jobTriggerId"];
            this.jobNo = _data["jobNo"];
            this.startType = _data["startType"];
            this.status = _data["status"];
        }
    }

    static override fromJS(data: any): BJob {
        data = typeof data === 'object' ? data : {};
        let result = new BJob();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["jobName"] = this.jobName;
        data["jobGroup"] = this.jobGroup;
        data["jobType"] = this.jobType;
        data["jobUrl"] = this.jobUrl;
        data["cronExpression"] = this.cronExpression;
        data["scheduleType"] = this.scheduleType;
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        data["weekDay"] = this.weekDay;
        data["hour"] = this.hour;
        data["minute"] = this.minute;
        data["second"] = this.second;
        data["batchLaunchMonthDay"] = this.batchLaunchMonthDay;
        data["batchLaunchWeedDay"] = this.batchLaunchWeedDay;
        data["loopStep"] = this.loopStep;
        data["workHourStart"] = this.workHourStart;
        data["workHourEnd"] = this.workHourEnd;
        data["jobTriggerId"] = this.jobTriggerId;
        data["jobNo"] = this.jobNo;
        data["startType"] = this.startType;
        data["status"] = this.status;
        super.toJSON(data);
        return data;
    }
}

export interface IBJob extends IBaseAuditableEntity {
    jobName?: string;
    jobGroup?: string;
    jobType?: JobType;
    jobUrl?: string | undefined;
    cronExpression?: string | undefined;
    scheduleType?: string;
    year?: string | undefined;
    month?: string | undefined;
    day?: string | undefined;
    weekDay?: string | undefined;
    hour?: string | undefined;
    minute?: string | undefined;
    second?: string | undefined;
    batchLaunchMonthDay?: string | undefined;
    batchLaunchWeedDay?: string | undefined;
    loopStep?: number;
    workHourStart?: number;
    workHourEnd?: number;
    jobTriggerId?: number | undefined;
    jobNo?: number | undefined;
    startType?: number | undefined;
    status?: TaskJobStatus;
}

export enum JobType {
    Scheduled = 0,
    Trigger = 1,
}

export enum TaskJobStatus {
    Enqueued = 0,
    Scheduled = 1,
    Processing = 2,
    Succeeded = 3,
    Failed = 4,
    Deleted = 5,
    Awaiting = 6,
    Stop = 7,
    Paused = 8,
    Canceled = 9,
    Rescheduled = 10,
}

export abstract class BaseEvent implements IBaseEvent {

    constructor(data?: IBaseEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): BaseEvent {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'BaseEvent' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IBaseEvent {
}

export class CreateBatchJobCommand implements ICreateBatchJobCommand {
    jobName?: string | undefined;
    jobGroup?: string | undefined;
    jobType?: JobType;
    jobUrl?: string | undefined;
    cronExpression?: string | undefined;
    scheduleType?: number | undefined;
    year?: number | undefined;
    month?: number | undefined;
    day?: number | undefined;
    weekDay?: number | undefined;
    hour?: number | undefined;
    minute?: number | undefined;
    second?: number | undefined;
    batchLaunchMonthDay?: string[];
    batchLaunchWeekDay?: string[];
    loopStep?: number;
    workHourStart?: number;
    workHourEnd?: number;
    jobTriggerId?: number | undefined;
    jobNo?: number | undefined;
    status?: number | undefined;
    startType?: number | undefined;

    constructor(data?: ICreateBatchJobCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.jobName = _data["jobName"];
            this.jobGroup = _data["jobGroup"];
            this.jobType = _data["jobType"];
            this.jobUrl = _data["jobUrl"];
            this.cronExpression = _data["cronExpression"];
            this.scheduleType = _data["scheduleType"];
            this.year = _data["year"];
            this.month = _data["month"];
            this.day = _data["day"];
            this.weekDay = _data["weekDay"];
            this.hour = _data["hour"];
            this.minute = _data["minute"];
            this.second = _data["second"];
            if (Array.isArray(_data["batchLaunchMonthDay"])) {
                this.batchLaunchMonthDay = [] as any;
                for (let item of _data["batchLaunchMonthDay"])
                    this.batchLaunchMonthDay!.push(item);
            }
            if (Array.isArray(_data["batchLaunchWeekDay"])) {
                this.batchLaunchWeekDay = [] as any;
                for (let item of _data["batchLaunchWeekDay"])
                    this.batchLaunchWeekDay!.push(item);
            }
            this.loopStep = _data["loopStep"];
            this.workHourStart = _data["workHourStart"];
            this.workHourEnd = _data["workHourEnd"];
            this.jobTriggerId = _data["jobTriggerId"];
            this.jobNo = _data["jobNo"];
            this.status = _data["status"];
            this.startType = _data["startType"];
        }
    }

    static fromJS(data: any): CreateBatchJobCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBatchJobCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["jobName"] = this.jobName;
        data["jobGroup"] = this.jobGroup;
        data["jobType"] = this.jobType;
        data["jobUrl"] = this.jobUrl;
        data["cronExpression"] = this.cronExpression;
        data["scheduleType"] = this.scheduleType;
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        data["weekDay"] = this.weekDay;
        data["hour"] = this.hour;
        data["minute"] = this.minute;
        data["second"] = this.second;
        if (Array.isArray(this.batchLaunchMonthDay)) {
            data["batchLaunchMonthDay"] = [];
            for (let item of this.batchLaunchMonthDay)
                data["batchLaunchMonthDay"].push(item);
        }
        if (Array.isArray(this.batchLaunchWeekDay)) {
            data["batchLaunchWeekDay"] = [];
            for (let item of this.batchLaunchWeekDay)
                data["batchLaunchWeekDay"].push(item);
        }
        data["loopStep"] = this.loopStep;
        data["workHourStart"] = this.workHourStart;
        data["workHourEnd"] = this.workHourEnd;
        data["jobTriggerId"] = this.jobTriggerId;
        data["jobNo"] = this.jobNo;
        data["status"] = this.status;
        data["startType"] = this.startType;
        return data;
    }
}

export interface ICreateBatchJobCommand {
    jobName?: string | undefined;
    jobGroup?: string | undefined;
    jobType?: JobType;
    jobUrl?: string | undefined;
    cronExpression?: string | undefined;
    scheduleType?: number | undefined;
    year?: number | undefined;
    month?: number | undefined;
    day?: number | undefined;
    weekDay?: number | undefined;
    hour?: number | undefined;
    minute?: number | undefined;
    second?: number | undefined;
    batchLaunchMonthDay?: string[];
    batchLaunchWeekDay?: string[];
    loopStep?: number;
    workHourStart?: number;
    workHourEnd?: number;
    jobTriggerId?: number | undefined;
    jobNo?: number | undefined;
    status?: number | undefined;
    startType?: number | undefined;
}

export class UpdateBatchJobCommand implements IUpdateBatchJobCommand {
    id?: number;
    jobName?: string | undefined;
    jobGroup?: string | undefined;
    jobType?: JobType;
    jobUrl?: string | undefined;
    cronExpression?: string | undefined;
    scheduleType?: number | undefined;
    year?: number | undefined;
    month?: number | undefined;
    day?: number | undefined;
    weekDay?: number | undefined;
    hour?: number | undefined;
    minute?: number | undefined;
    second?: number | undefined;
    batchLaunchMonthDay?: string[];
    batchLaunchWeekDay?: string[];
    loopStep?: number;
    workHourStart?: number;
    workHourEnd?: number;
    jobTriggerId?: number | undefined;
    jobNo?: number | undefined;
    status?: number | undefined;
    startType?: number | undefined;

    constructor(data?: IUpdateBatchJobCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.jobName = _data["jobName"];
            this.jobGroup = _data["jobGroup"];
            this.jobType = _data["jobType"];
            this.jobUrl = _data["jobUrl"];
            this.cronExpression = _data["cronExpression"];
            this.scheduleType = _data["scheduleType"];
            this.year = _data["year"];
            this.month = _data["month"];
            this.day = _data["day"];
            this.weekDay = _data["weekDay"];
            this.hour = _data["hour"];
            this.minute = _data["minute"];
            this.second = _data["second"];
            if (Array.isArray(_data["batchLaunchMonthDay"])) {
                this.batchLaunchMonthDay = [] as any;
                for (let item of _data["batchLaunchMonthDay"])
                    this.batchLaunchMonthDay!.push(item);
            }
            if (Array.isArray(_data["batchLaunchWeekDay"])) {
                this.batchLaunchWeekDay = [] as any;
                for (let item of _data["batchLaunchWeekDay"])
                    this.batchLaunchWeekDay!.push(item);
            }
            this.loopStep = _data["loopStep"];
            this.workHourStart = _data["workHourStart"];
            this.workHourEnd = _data["workHourEnd"];
            this.jobTriggerId = _data["jobTriggerId"];
            this.jobNo = _data["jobNo"];
            this.status = _data["status"];
            this.startType = _data["startType"];
        }
    }

    static fromJS(data: any): UpdateBatchJobCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBatchJobCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["jobName"] = this.jobName;
        data["jobGroup"] = this.jobGroup;
        data["jobType"] = this.jobType;
        data["jobUrl"] = this.jobUrl;
        data["cronExpression"] = this.cronExpression;
        data["scheduleType"] = this.scheduleType;
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        data["weekDay"] = this.weekDay;
        data["hour"] = this.hour;
        data["minute"] = this.minute;
        data["second"] = this.second;
        if (Array.isArray(this.batchLaunchMonthDay)) {
            data["batchLaunchMonthDay"] = [];
            for (let item of this.batchLaunchMonthDay)
                data["batchLaunchMonthDay"].push(item);
        }
        if (Array.isArray(this.batchLaunchWeekDay)) {
            data["batchLaunchWeekDay"] = [];
            for (let item of this.batchLaunchWeekDay)
                data["batchLaunchWeekDay"].push(item);
        }
        data["loopStep"] = this.loopStep;
        data["workHourStart"] = this.workHourStart;
        data["workHourEnd"] = this.workHourEnd;
        data["jobTriggerId"] = this.jobTriggerId;
        data["jobNo"] = this.jobNo;
        data["status"] = this.status;
        data["startType"] = this.startType;
        return data;
    }
}

export interface IUpdateBatchJobCommand {
    id?: number;
    jobName?: string | undefined;
    jobGroup?: string | undefined;
    jobType?: JobType;
    jobUrl?: string | undefined;
    cronExpression?: string | undefined;
    scheduleType?: number | undefined;
    year?: number | undefined;
    month?: number | undefined;
    day?: number | undefined;
    weekDay?: number | undefined;
    hour?: number | undefined;
    minute?: number | undefined;
    second?: number | undefined;
    batchLaunchMonthDay?: string[];
    batchLaunchWeekDay?: string[];
    loopStep?: number;
    workHourStart?: number;
    workHourEnd?: number;
    jobTriggerId?: number | undefined;
    jobNo?: number | undefined;
    status?: number | undefined;
    startType?: number | undefined;
}

export class PaginatedListOfBatchJobVm implements IPaginatedListOfBatchJobVm {
    items?: BatchJobVm[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfBatchJobVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BatchJobVm.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfBatchJobVm {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfBatchJobVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfBatchJobVm {
    items?: BatchJobVm[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class BatchJobVm implements IBatchJobVm {
    id?: number;
    jobName?: string;
    jobGroup?: string;
    jobType?: JobType;
    jobUrl?: string | undefined;
    cronExpression?: string | undefined;
    cronExpressionStr?: string | undefined;
    scheduleType?: string | undefined;
    scheduleTypeStr?: string | undefined;
    year?: string | undefined;
    month?: string | undefined;
    day?: string | undefined;
    weekDay?: string | undefined;
    hour?: string | undefined;
    minute?: string | undefined;
    second?: string | undefined;
    batchLaunchMonthDay?: string[] | undefined;
    batchLaunchWeekDay?: string[] | undefined;
    loopStep?: number;
    workHourStart?: number;
    workHourEnd?: number;
    jobTriggerId?: number | undefined;
    jobNo?: number | undefined;
    startType?: number | undefined;
    status?: TaskJobStatus;
    taskJobStatusDes?: string;
    taskJobStatusColor?: string;

    constructor(data?: IBatchJobVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.jobName = _data["jobName"];
            this.jobGroup = _data["jobGroup"];
            this.jobType = _data["jobType"];
            this.jobUrl = _data["jobUrl"];
            this.cronExpression = _data["cronExpression"];
            this.cronExpressionStr = _data["cronExpressionStr"];
            this.scheduleType = _data["scheduleType"];
            this.scheduleTypeStr = _data["scheduleTypeStr"];
            this.year = _data["year"];
            this.month = _data["month"];
            this.day = _data["day"];
            this.weekDay = _data["weekDay"];
            this.hour = _data["hour"];
            this.minute = _data["minute"];
            this.second = _data["second"];
            if (Array.isArray(_data["batchLaunchMonthDay"])) {
                this.batchLaunchMonthDay = [] as any;
                for (let item of _data["batchLaunchMonthDay"])
                    this.batchLaunchMonthDay!.push(item);
            }
            if (Array.isArray(_data["batchLaunchWeekDay"])) {
                this.batchLaunchWeekDay = [] as any;
                for (let item of _data["batchLaunchWeekDay"])
                    this.batchLaunchWeekDay!.push(item);
            }
            this.loopStep = _data["loopStep"];
            this.workHourStart = _data["workHourStart"];
            this.workHourEnd = _data["workHourEnd"];
            this.jobTriggerId = _data["jobTriggerId"];
            this.jobNo = _data["jobNo"];
            this.startType = _data["startType"];
            this.status = _data["status"];
            this.taskJobStatusDes = _data["taskJobStatusDes"];
            this.taskJobStatusColor = _data["taskJobStatusColor"];
        }
    }

    static fromJS(data: any): BatchJobVm {
        data = typeof data === 'object' ? data : {};
        let result = new BatchJobVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["jobName"] = this.jobName;
        data["jobGroup"] = this.jobGroup;
        data["jobType"] = this.jobType;
        data["jobUrl"] = this.jobUrl;
        data["cronExpression"] = this.cronExpression;
        data["cronExpressionStr"] = this.cronExpressionStr;
        data["scheduleType"] = this.scheduleType;
        data["scheduleTypeStr"] = this.scheduleTypeStr;
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        data["weekDay"] = this.weekDay;
        data["hour"] = this.hour;
        data["minute"] = this.minute;
        data["second"] = this.second;
        if (Array.isArray(this.batchLaunchMonthDay)) {
            data["batchLaunchMonthDay"] = [];
            for (let item of this.batchLaunchMonthDay)
                data["batchLaunchMonthDay"].push(item);
        }
        if (Array.isArray(this.batchLaunchWeekDay)) {
            data["batchLaunchWeekDay"] = [];
            for (let item of this.batchLaunchWeekDay)
                data["batchLaunchWeekDay"].push(item);
        }
        data["loopStep"] = this.loopStep;
        data["workHourStart"] = this.workHourStart;
        data["workHourEnd"] = this.workHourEnd;
        data["jobTriggerId"] = this.jobTriggerId;
        data["jobNo"] = this.jobNo;
        data["startType"] = this.startType;
        data["status"] = this.status;
        data["taskJobStatusDes"] = this.taskJobStatusDes;
        data["taskJobStatusColor"] = this.taskJobStatusColor;
        return data;
    }
}

export interface IBatchJobVm {
    id?: number;
    jobName?: string;
    jobGroup?: string;
    jobType?: JobType;
    jobUrl?: string | undefined;
    cronExpression?: string | undefined;
    cronExpressionStr?: string | undefined;
    scheduleType?: string | undefined;
    scheduleTypeStr?: string | undefined;
    year?: string | undefined;
    month?: string | undefined;
    day?: string | undefined;
    weekDay?: string | undefined;
    hour?: string | undefined;
    minute?: string | undefined;
    second?: string | undefined;
    batchLaunchMonthDay?: string[] | undefined;
    batchLaunchWeekDay?: string[] | undefined;
    loopStep?: number;
    workHourStart?: number;
    workHourEnd?: number;
    jobTriggerId?: number | undefined;
    jobNo?: number | undefined;
    startType?: number | undefined;
    status?: TaskJobStatus;
    taskJobStatusDes?: string;
    taskJobStatusColor?: string;
}

export class PaginatedListOfTodoItemBriefDto implements IPaginatedListOfTodoItemBriefDto {
    items?: TodoItemBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;

    constructor(data?: IPaginatedListOfTodoItemBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TodoItemBriefDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.totalPages = _data["totalPages"];
            this.totalCount = _data["totalCount"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
        }
    }

    static fromJS(data: any): PaginatedListOfTodoItemBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfTodoItemBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["totalPages"] = this.totalPages;
        data["totalCount"] = this.totalCount;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        return data;
    }
}

export interface IPaginatedListOfTodoItemBriefDto {
    items?: TodoItemBriefDto[];
    pageNumber?: number;
    totalPages?: number;
    totalCount?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
}

export class TodoItemBriefDto implements ITodoItemBriefDto {
    id?: number;
    listId?: number;
    title?: string | undefined;
    done?: boolean;

    constructor(data?: ITodoItemBriefDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.listId = _data["listId"];
            this.title = _data["title"];
            this.done = _data["done"];
        }
    }

    static fromJS(data: any): TodoItemBriefDto {
        data = typeof data === 'object' ? data : {};
        let result = new TodoItemBriefDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["listId"] = this.listId;
        data["title"] = this.title;
        data["done"] = this.done;
        return data;
    }
}

export interface ITodoItemBriefDto {
    id?: number;
    listId?: number;
    title?: string | undefined;
    done?: boolean;
}

export class CreateTodoItemCommand implements ICreateTodoItemCommand {
    listId?: number;
    title?: string | undefined;

    constructor(data?: ICreateTodoItemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.listId = _data["listId"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): CreateTodoItemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTodoItemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listId"] = this.listId;
        data["title"] = this.title;
        return data;
    }
}

export interface ICreateTodoItemCommand {
    listId?: number;
    title?: string | undefined;
}

export class UpdateTodoItemCommand implements IUpdateTodoItemCommand {
    id?: number;
    title?: string | undefined;
    done?: boolean;

    constructor(data?: IUpdateTodoItemCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.done = _data["done"];
        }
    }

    static fromJS(data: any): UpdateTodoItemCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTodoItemCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["done"] = this.done;
        return data;
    }
}

export interface IUpdateTodoItemCommand {
    id?: number;
    title?: string | undefined;
    done?: boolean;
}

export class UpdateTodoItemDetailCommand implements IUpdateTodoItemDetailCommand {
    id?: number;
    listId?: number;
    priority?: PriorityLevel;
    note?: string | undefined;

    constructor(data?: IUpdateTodoItemDetailCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.listId = _data["listId"];
            this.priority = _data["priority"];
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): UpdateTodoItemDetailCommand {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateTodoItemDetailCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["listId"] = this.listId;
        data["priority"] = this.priority;
        data["note"] = this.note;
        return data;
    }
}

export interface IUpdateTodoItemDetailCommand {
    id?: number;
    listId?: number;
    priority?: PriorityLevel;
    note?: string | undefined;
}

export enum PriorityLevel {
    None = 0,
    Low = 1,
    Medium = 2,
    High = 3,
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}